{"id":"../node_modules/rxjs/dist/esm5/internal/operators/multicast.js","dependencies":[{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\multicast.js.map","includedInParent":true,"mtime":1655261656603},{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\src\\internal\\operators\\multicast.ts","includedInParent":true,"mtime":1655261656734},{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\package.json","includedInParent":true,"mtime":1655261657032},{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1655261656714},{"name":"../observable/ConnectableObservable","loc":{"line":1,"column":38,"index":38},"parent":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\multicast.js","resolved":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\ConnectableObservable.js"},{"name":"../util/isFunction","loc":{"line":2,"column":27,"index":105},"parent":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\multicast.js","resolved":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\isFunction.js"},{"name":"./connect","loc":{"line":3,"column":24,"index":152},"parent":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\multicast.js","resolved":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\connect.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.multicast = multicast;\n\nvar _ConnectableObservable = require(\"../observable/ConnectableObservable\");\n\nvar _isFunction = require(\"../util/isFunction\");\n\nvar _connect = require(\"./connect\");\n\nfunction multicast(subjectOrSubjectFactory, selector) {\n  var subjectFactory = (0, _isFunction.isFunction)(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function () {\n    return subjectOrSubjectFactory;\n  };\n\n  if ((0, _isFunction.isFunction)(selector)) {\n    return (0, _connect.connect)(selector, {\n      connector: subjectFactory\n    });\n  }\n\n  return function (source) {\n    return new _ConnectableObservable.ConnectableObservable(source, subjectFactory);\n  };\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":82,"column":6},"generated":{"line":14,"column":0}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":82,"column":16},"generated":{"line":14,"column":9}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":82,"column":6},"generated":{"line":14,"column":18}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":83,"column":2},"generated":{"line":14,"column":19}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":82,"column":6},"generated":{"line":14,"column":42}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":84,"column":2},"generated":{"line":14,"column":44}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":82,"column":6},"generated":{"line":14,"column":52}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":84,"column":53},"generated":{"line":14,"column":54}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":2},"generated":{"line":15,"column":2}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":8},"generated":{"line":15,"column":6}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":22},"generated":{"line":15,"column":20}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":25},"generated":{"line":15,"column":23}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":25},"generated":{"line":15,"column":27}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":25},"generated":{"line":15,"column":49}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":36},"generated":{"line":15,"column":51}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":25},"generated":{"line":15,"column":74}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":63},"generated":{"line":15,"column":78}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":25},"generated":{"line":15,"column":101}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":89},"generated":{"line":15,"column":104}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":89},"generated":{"line":15,"column":116}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":95},"generated":{"line":16,"column":4}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":95},"generated":{"line":16,"column":11}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":95},"generated":{"line":16,"column":34}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":118},"generated":{"line":17,"column":2}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":2},"generated":{"line":17,"column":3}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":88,"column":2},"generated":{"line":19,"column":2}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":88,"column":6},"generated":{"line":19,"column":6}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":88,"column":6},"generated":{"line":19,"column":10}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":88,"column":6},"generated":{"line":19,"column":32}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":88,"column":17},"generated":{"line":19,"column":34}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":88,"column":6},"generated":{"line":19,"column":42}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":88,"column":2},"generated":{"line":19,"column":43}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":88,"column":28},"generated":{"line":19,"column":45}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":92,"column":4},"generated":{"line":20,"column":4}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":92,"column":11},"generated":{"line":20,"column":11}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":92,"column":11},"generated":{"line":20,"column":15}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":92,"column":11},"generated":{"line":20,"column":31}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":92,"column":19},"generated":{"line":20,"column":33}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":92,"column":11},"generated":{"line":20,"column":41}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":92,"column":29},"generated":{"line":20,"column":43}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":93,"column":6},"generated":{"line":21,"column":6}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":93,"column":15},"generated":{"line":21,"column":15}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":93,"column":17},"generated":{"line":21,"column":17}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":92,"column":29},"generated":{"line":22,"column":4}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":92,"column":11},"generated":{"line":22,"column":5}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":92,"column":4},"generated":{"line":22,"column":6}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":95,"column":3},"generated":{"line":23,"column":2}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":25,"column":2}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":97,"column":9},"generated":{"line":25,"column":9}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":97,"column":10},"generated":{"line":25,"column":19}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":97,"column":9},"generated":{"line":25,"column":25}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":97,"column":31},"generated":{"line":25,"column":27}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":97,"column":36},"generated":{"line":26,"column":4}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":97,"column":36},"generated":{"line":26,"column":11}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":97,"column":40},"generated":{"line":26,"column":15}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":97,"column":36},"generated":{"line":26,"column":59}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":97,"column":67},"generated":{"line":26,"column":60}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":97,"column":36},"generated":{"line":26,"column":66}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":97,"column":75},"generated":{"line":26,"column":68}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":97,"column":36},"generated":{"line":26,"column":82}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":97,"column":36},"generated":{"line":26,"column":83}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":97,"column":90},"generated":{"line":27,"column":2}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":97,"column":2},"generated":{"line":27,"column":3}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":98,"column":1},"generated":{"line":28,"column":0}}],"sources":{"../../../../src/internal/operators/multicast.ts":"import { Subject } from '../Subject';\r\nimport { Observable } from '../Observable';\r\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\r\nimport { OperatorFunction, UnaryFunction, ObservedValueOf, ObservableInput } from '../types';\r\nimport { isFunction } from '../util/isFunction';\r\nimport { connect } from './connect';\r\n\r\n/**\r\n * An operator that creates a {@link ConnectableObservable}, that when connected,\r\n * with the `connect` method, will use the provided subject to multicast the values\r\n * from the source to all consumers.\r\n *\r\n * @param subject The subject to multicast through.\r\n * @return A function that returns a {@link ConnectableObservable}\r\n * @deprecated Will be removed in v8. To create a connectable observable, use {@link connectable}.\r\n * If you're using {@link refCount} after `multicast`, use the {@link share} operator instead.\r\n * `multicast(subject), refCount()` is equivalent to\r\n * `share({ connector: () => subject, resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false })`.\r\n * Details: https://rxjs.dev/deprecations/multicasting\r\n */\r\nexport function multicast<T>(subject: Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\r\n\r\n/**\r\n * Because this is deprecated in favor of the {@link connect} operator, and was otherwise poorly documented,\r\n * rather than duplicate the effort of documenting the same behavior, please see documentation for the\r\n * {@link connect} operator.\r\n *\r\n * @param subject The subject used to multicast.\r\n * @param selector A setup function to setup the multicast\r\n * @return A function that returns an observable that mirrors the observable returned by the selector.\r\n * @deprecated Will be removed in v8. Use the {@link connect} operator instead.\r\n * `multicast(subject, selector)` is equivalent to\r\n * `connect(selector, { connector: () => subject })`.\r\n * Details: https://rxjs.dev/deprecations/multicasting\r\n */\r\nexport function multicast<T, O extends ObservableInput<any>>(\r\n  subject: Subject<T>,\r\n  selector: (shared: Observable<T>) => O\r\n): OperatorFunction<T, ObservedValueOf<O>>;\r\n\r\n/**\r\n * An operator that creates a {@link ConnectableObservable}, that when connected,\r\n * with the `connect` method, will use the provided subject to multicast the values\r\n * from the source to all consumers.\r\n *\r\n * @param subjectFactory A factory that will be called to create the subject. Passing a function here\r\n * will cause the underlying subject to be \"reset\" on error, completion, or refCounted unsubscription of\r\n * the source.\r\n * @return A function that returns a {@link ConnectableObservable}\r\n * @deprecated Will be removed in v8. To create a connectable observable, use {@link connectable}.\r\n * If you're using {@link refCount} after `multicast`, use the {@link share} operator instead.\r\n * `multicast(() => new BehaviorSubject('test')), refCount()` is equivalent to\r\n * `share({ connector: () => new BehaviorSubject('test') })`.\r\n * Details: https://rxjs.dev/deprecations/multicasting\r\n */\r\nexport function multicast<T>(subjectFactory: () => Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\r\n\r\n/**\r\n * Because this is deprecated in favor of the {@link connect} operator, and was otherwise poorly documented,\r\n * rather than duplicate the effort of documenting the same behavior, please see documentation for the\r\n * {@link connect} operator.\r\n *\r\n * @param subjectFactory A factory that creates the subject used to multicast.\r\n * @param selector A function to setup the multicast and select the output.\r\n * @return A function that returns an observable that mirrors the observable returned by the selector.\r\n * @deprecated Will be removed in v8. Use the {@link connect} operator instead.\r\n * `multicast(subjectFactory, selector)` is equivalent to\r\n * `connect(selector, { connector: subjectFactory })`.\r\n * Details: https://rxjs.dev/deprecations/multicasting\r\n */\r\nexport function multicast<T, O extends ObservableInput<any>>(\r\n  subjectFactory: () => Subject<T>,\r\n  selector: (shared: Observable<T>) => O\r\n): OperatorFunction<T, ObservedValueOf<O>>;\r\n\r\n/**\r\n * @deprecated Will be removed in v8. Use the {@link connectable} observable, the {@link connect} operator or the\r\n * {@link share} operator instead. See the overloads below for equivalent replacement examples of this operator's\r\n * behaviors.\r\n * Details: https://rxjs.dev/deprecations/multicasting\r\n */\r\nexport function multicast<T, R>(\r\n  subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\r\n  selector?: (source: Observable<T>) => Observable<R>\r\n): OperatorFunction<T, R> {\r\n  const subjectFactory = isFunction(subjectOrSubjectFactory) ? subjectOrSubjectFactory : () => subjectOrSubjectFactory;\r\n\r\n  if (isFunction(selector)) {\r\n    // If a selector function is provided, then we're a \"normal\" operator that isn't\r\n    // going to return a ConnectableObservable. We can use `connect` to do what we\r\n    // need to do.\r\n    return connect(selector, {\r\n      connector: subjectFactory,\r\n    });\r\n  }\r\n\r\n  return (source: Observable<T>) => new ConnectableObservable<any>(source, subjectFactory);\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"1bc8f3d758c44b971d8c3b6633995941","cacheData":{"env":{}}}