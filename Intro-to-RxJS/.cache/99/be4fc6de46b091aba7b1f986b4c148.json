{"id":"index.js","dependencies":[{"name":"/Users/raul/Desktop/Work/ZeroToMastery_Angular/Intro-to-RxJS/package.json","includedInParent":true,"mtime":1625261732000},{"name":"rxjs","loc":{"line":23,"column":27,"index":558},"parent":"/Users/raul/Desktop/Work/ZeroToMastery_Angular/Intro-to-RxJS/src/index.js","resolved":"/Users/raul/Desktop/Work/ZeroToMastery_Angular/Intro-to-RxJS/node_modules/rxjs/dist/esm5/index.js"}],"generated":{"js":"\"use strict\";\n\nvar _rxjs = require(\"rxjs\");"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":3,"column":0},"source":"index.js","original":{"line":23,"column":0}}],"sources":{"index.js":"//Observable Example\n\n// import { Observable } from 'rxjs';\n\n// const obs = new Observable((subscriber) => {\n//     subscriber.next('Data Stream One');\n//     subscriber.next('Data Stream two');\n//     subscriber.complete();\n//     subscriber.next('Data Stream Three');\n//     subscriber.error('test error');\n//  });\n\n// obs.subscribe({\n//     next: (value) => {\n//         console.log(value)\n//     },\n//     complete: () => { console.log('complete called') },\n//     error: (err)=>{console.log(err)}\n// })\n\n//Observable Example\n\nimport { Observable } from 'rxjs';\n\n// const obs = new Observable((subscriber) => {\n//     subscriber.next('Data Stream One');\n//     subscriber.next('Data Stream two');\n//     subscriber.complete();\n//     subscriber.next('Data Stream Three');\n//     subscriber.error('test error');\n//  });\n\n// obs.subscribe({\n//     next: (value) => {\n//         console.log(value)\n//     },\n//     complete: () => { console.log('complete called') },\n//     error: (err)=>{console.log(err)}\n// })\n\n\n//----------------------------------------- Synchronous Observable ----------------------------------------------------\n\n/*\n\nconst obs = new Observable((subscriber) => {\n    subscriber.next('observer');\n})\n\nconsole.log('Before Subscribing');\n\nconsole.log('Before');\n\nobs.subscribe({\n    next: (value) => {\n        console.log(value)\n    },\n    complete: () => { console.log('complete called') },\n    error: (err)=>{console.log(err)}\n})\n\n\nconsole.log('After');\n\n*/\n\n//\n\n//\n\n\n//----------------------------------------- ASynchronous Observable ----------------------------------------------------\n\n//\n\n//With memory leak\n\n// const obs = new Observable((subscriber) => {\n//     setInterval(() => {\n//         subscriber.next('text')\n//     console.log(`memory leak even after 'subscriber.complete' is called`)}, 1000) //memory leak\n//     subscriber.complete();\n//  });\n\n// console.log('Before');\n\n// obs.subscribe({\n//     next: (value) => {\n//         console.log(value)\n//     },\n//     complete: () => { console.log('complete called') },\n//     error: (err)=>{console.log(err)}\n// })\n\n// console.log('After');\n\n//----------------******************* Without memory leak ********************---------------------\n\n/*\n\nconst obs = new Observable((subscriber) => {\n    const id = setInterval(() => {\n        subscriber.next('text')\n    console.log(`memory leak even after 'subscriber.complete' is called`)}, 1000) //memory leak\n    subscriber.complete();\n\n    return ()=>{ \n        clearInterval(id);\n    }\n });\n\nconsole.log('Before');\n\nobs.subscribe({\n    next: (value) => {\n        console.log(value)\n    },\n    complete: () => { console.log('complete called') },\n    error: (err)=>{console.log(err)}\n})\n\nconsole.log('After');\n\n*/"},"lineCount":null}},"error":null,"hash":"b906ed010a1b1227455d77453b176a7b","cacheData":{"env":{}}}