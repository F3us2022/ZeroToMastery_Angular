{"id":"index.js","dependencies":[{"name":"/Users/raul/Desktop/Work/ZeroToMastery_Angular/Intro-to-RxJS/package.json","includedInParent":true,"mtime":1625261732000},{"name":"rxjs","loc":{"line":201,"column":24,"index":4406},"parent":"/Users/raul/Desktop/Work/ZeroToMastery_Angular/Intro-to-RxJS/src/index.js","resolved":"/Users/raul/Desktop/Work/ZeroToMastery_Angular/Intro-to-RxJS/node_modules/rxjs/dist/esm5/index.js"}],"generated":{"js":"\"use strict\";\n\nvar _rxjs = require(\"rxjs\");"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":3,"column":0},"source":"index.js","original":{"line":201,"column":0}}],"sources":{"index.js":"//Observable Example\n\n// import { Observable } from 'rxjs';\n\n// const obs = new Observable((subscriber) => {\n//     subscriber.next('Data Stream One');\n//     subscriber.next('Data Stream two');\n//     subscriber.complete();\n//     subscriber.next('Data Stream Three');\n//     subscriber.error('test error');\n//  });\n\n// obs.subscribe({\n//     next: (value) => {\n//         console.log(value)\n//     },\n//     complete: () => { console.log('complete called') },\n//     error: (err)=>{console.log(err)}\n// })\n\n//Observable Example\n\n\n// const obs = new Observable((subscriber) => {\n//     subscriber.next('Data Stream One');\n//     subscriber.next('Data Stream two');\n//     subscriber.complete();\n//     subscriber.next('Data Stream Three');\n//     subscriber.error('test error');\n//  });\n\n// obs.subscribe({\n//     next: (value) => {\n//         console.log(value)\n//     },\n//     complete: () => { console.log('complete called') },\n//     error: (err)=>{console.log(err)}\n// })\n\n\n//----------------------------------------- Synchronous Observable ----------------------------------------------------\n\n/*\n\nconst obs = new Observable((subscriber) => {\n    subscriber.next('observer');\n})\n\nconsole.log('Before Subscribing');\n\nconsole.log('Before');\n\nobs.subscribe({\n    next: (value) => {\n        console.log(value)\n    },\n    complete: () => { console.log('complete called') },\n    error: (err)=>{console.log(err)}\n})\n\n\nconsole.log('After');\n\n*/\n\n//\n\n//\n\n\n//----------------------------------------- ASynchronous Observable ----------------------------------------------------\n\n//\n\n//With memory leak\n\n// const obs = new Observable((subscriber) => {\n//     setInterval(() => {\n//         subscriber.next('text')\n//     console.log(`memory leak even after 'subscriber.complete' is called`)}, 1000) //memory leak\n//     subscriber.complete();\n//  });\n\n// console.log('Before');\n\n// obs.subscribe({\n//     next: (value) => {\n//         console.log(value)\n//     },\n//     complete: () => { console.log('complete called') },\n//     error: (err)=>{console.log(err)}\n// })\n\n// console.log('After');\n\n//----------------******************* Without memory leak ********************---------------------\n\n/*\n\nconst obs = new Observable((subscriber) => {\n    const id = setInterval(() => {\n        subscriber.next('text')\n    console.log(`memory leak even after 'subscriber.complete' is called`)}, 1000) //memory leak\n    subscriber.complete();\n\n    return ()=>{ \n        clearInterval(id);\n    }\n });\n\nconsole.log('Before');\n\nobs.subscribe({\n    next: (value) => {\n        console.log(value)\n    },\n    complete: () => { console.log('complete called') },\n    error: (err)=>{console.log(err)}\n})\n\nconsole.log('After');\n\n*/\n\n//\n\n//------------------------------------- ASynchronous Observable (UNSUBSCRIBE)-------------------------------------------\n\n// const obs = new Observable((subscriber) => {\n//     const id = setInterval(() => {\n//         subscriber.next('text')\n//     console.log(`memory leak even after 'subscriber.complete' is called`)}, 1000) //memory leak\n\n//     return ()=>{ \n//         clearInterval(id);\n//     }\n//  });\n\n\n// const subscriber = obs.subscribe({\n//     next: (value) => {\n//         console.log(value)\n//     },\n//     complete: () => { console.log('complete called') },\n//     error: (err)=>{console.log(err)}\n// })\n\n// setTimeout(() => {subscriber.unsubscribe()},4000)\n\n//\n\n//\n\n\n//------------------------------------- Declarative Programming with OPERATORS-------------------------------------------\n\n\n//\n\n//------------------- Use of OPERATOR INTERVAL -----------\n\n// import { interval } from 'rxjs';\n\n// const obs = new interval(1000);\n\n\n// const subscriber = obs.subscribe(\n//     console.log\n// )\n\n//------------------- Use of OPERATOR TIMER --------------\n\n// import { timer } from 'rxjs'\n\n// const obs = new timer(0, 1000);\n\n// const subscriber = obs.subscribe(console.log);\n\n//\n\n//--------------------------------------------------- DOM Event OPERATORS-------------------------------------------------\n\n//\n\n// import { from, fromEvent } from 'rxjs'\n\n// const obs = new fromEvent(\n//     document, 'click'\n// );\n\n// const subscriber = obs.subscribe(console.log);\n\n//\n\n//--------------------------------------------------- Of and From OPERATORS----------------------------------------------\n\n//\n\n//---------------------- OF Operator ------------------\n\nimport { of ,from} from 'rxjs'\n\n//const obs = of(1, 2, 3, 4, 5);   \n//const obs = of([1, 2, 3, 4, 5]);   //cant show array elements individually\n\n// const subs = obs.subscribe({\n//     next(value) { console.log(value)},\n//     complete() { console.log('complete')}\n// })\n\n//---- OF retruns PROMISE\n\n// const obs = of(fetch('https://jsonplaceholder.typicode.com/todos/1'));   //cant show array elements individually\n\n// const subs = obs.subscribe({\n//     next(value) { console.log(value)},\n//     complete() { console.log('complete')}\n// })\n\n//\n//---------------------- FOR Operator\n//\n\n// const obsFor = from([1, 2, 3, 4, 5]);   //cant show array elements individually\n\n// const subsFor = obsFor.subscribe({\n//     next(value) { console.log(value)},\n//     complete() { console.log('complete')}\n// })\n\n//------ FROM returns values\n\n// const obsFor = from(fetch('https://jsonplaceholder.typicode.com/todos/1'));   //cant show array elements individually\n\n// const subsFor = obsFor.subscribe({\n//     next(value) { console.log(value)},\n//     complete() { console.log('complete')}\n// })\n"},"lineCount":null}},"error":null,"hash":"34bf97413cb6354df36ae778bf4d8461","cacheData":{"env":{}}}