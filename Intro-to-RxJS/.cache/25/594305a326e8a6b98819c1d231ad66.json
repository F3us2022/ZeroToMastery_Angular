{"id":"../node_modules/rxjs/dist/esm5/internal/operators/count.js","dependencies":[{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\count.js.map","includedInParent":true,"mtime":1655261656593},{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\src\\internal\\operators\\count.ts","includedInParent":true,"mtime":1655261656728},{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\package.json","includedInParent":true,"mtime":1655261657032},{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1655261656714},{"name":"./reduce","loc":{"line":1,"column":23,"index":23},"parent":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\count.js","resolved":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\reduce.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.count = count;\n\nvar _reduce = require(\"./reduce\");\n\nfunction count(predicate) {\n  return (0, _reduce.reduce)(function (total, value, i) {\n    return !predicate || predicate(value, i) ? total + 1 : total;\n  }, 0);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":59,"column":6},"generated":{"line":10,"column":0}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":59,"column":16},"generated":{"line":10,"column":9}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":59,"column":6},"generated":{"line":10,"column":14}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":59,"column":25},"generated":{"line":10,"column":15}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":59,"column":6},"generated":{"line":10,"column":24}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":59,"column":73},"generated":{"line":10,"column":26}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":2},"generated":{"line":11,"column":2}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":9},"generated":{"line":11,"column":9}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":9},"generated":{"line":11,"column":13}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":9},"generated":{"line":11,"column":27}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":16},"generated":{"line":11,"column":29}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":17},"generated":{"line":11,"column":39}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":16},"generated":{"line":11,"column":44}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":24},"generated":{"line":11,"column":46}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":16},"generated":{"line":11,"column":51}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":31},"generated":{"line":11,"column":53}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":16},"generated":{"line":11,"column":54}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":32},"generated":{"line":11,"column":56}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":37},"generated":{"line":12,"column":4}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":38},"generated":{"line":12,"column":11}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":39},"generated":{"line":12,"column":12}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":38},"generated":{"line":12,"column":21}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":52},"generated":{"line":12,"column":25}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":61},"generated":{"line":12,"column":34}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":62},"generated":{"line":12,"column":35}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":61},"generated":{"line":12,"column":40}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":69},"generated":{"line":12,"column":42}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":61},"generated":{"line":12,"column":43}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":38},"generated":{"line":12,"column":44}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":74},"generated":{"line":12,"column":47}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":79},"generated":{"line":12,"column":52}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":82},"generated":{"line":12,"column":55}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":38},"generated":{"line":12,"column":56}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":86},"generated":{"line":12,"column":59}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":37},"generated":{"line":12,"column":64}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":92},"generated":{"line":13,"column":2}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":9},"generated":{"line":13,"column":3}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":94},"generated":{"line":13,"column":5}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":9},"generated":{"line":13,"column":6}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":60,"column":2},"generated":{"line":13,"column":7}},{"source":"../../../../src/internal/operators/count.ts","name":null,"original":{"line":61,"column":1},"generated":{"line":14,"column":0}}],"sources":{"../../../../src/internal/operators/count.ts":"import { OperatorFunction } from '../types';\r\nimport { reduce } from './reduce';\r\n\r\n/**\r\n * Counts the number of emissions on the source and emits that number when the\r\n * source completes.\r\n *\r\n * <span class=\"informal\">Tells how many values were emitted, when the source\r\n * completes.</span>\r\n *\r\n * ![](count.png)\r\n *\r\n * `count` transforms an Observable that emits values into an Observable that\r\n * emits a single value that represents the number of values emitted by the\r\n * source Observable. If the source Observable terminates with an error, `count`\r\n * will pass this error notification along without emitting a value first. If\r\n * the source Observable does not terminate at all, `count` will neither emit\r\n * a value nor terminate. This operator takes an optional `predicate` function\r\n * as argument, in which case the output emission will represent the number of\r\n * source values that matched `true` with the `predicate`.\r\n *\r\n * ## Examples\r\n *\r\n * Counts how many seconds have passed before the first click happened\r\n *\r\n * ```ts\r\n * import { interval, fromEvent, takeUntil, count } from 'rxjs';\r\n *\r\n * const seconds = interval(1000);\r\n * const clicks = fromEvent(document, 'click');\r\n * const secondsBeforeClick = seconds.pipe(takeUntil(clicks));\r\n * const result = secondsBeforeClick.pipe(count());\r\n * result.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * Counts how many odd numbers are there between 1 and 7\r\n *\r\n * ```ts\r\n * import { range, count } from 'rxjs';\r\n *\r\n * const numbers = range(1, 7);\r\n * const result = numbers.pipe(count(i => i % 2 === 1));\r\n * result.subscribe(x => console.log(x));\r\n * // Results in:\r\n * // 4\r\n * ```\r\n *\r\n * @see {@link max}\r\n * @see {@link min}\r\n * @see {@link reduce}\r\n *\r\n * @param predicate A function that is used to analyze the value and the index and\r\n * determine whether or not to increment the count. Return `true` to increment the count,\r\n * and return `false` to keep the count the same.\r\n * If the predicate is not provided, every value will be counted.\r\n * @return A function that returns an Observable that emits one number that\r\n * represents the count of emissions.\r\n */\r\nexport function count<T>(predicate?: (value: T, index: number) => boolean): OperatorFunction<T, number> {\r\n  return reduce((total, value, i) => (!predicate || predicate(value, i) ? total + 1 : total), 0);\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"4484bb643c13164a0bba1fa158b22652","cacheData":{"env":{}}}