{"id":"../node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js","dependencies":[{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\mergeAll.js.map","includedInParent":true,"mtime":1655261656601},{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\src\\internal\\operators\\mergeAll.ts","includedInParent":true,"mtime":1655261656732},{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\package.json","includedInParent":true,"mtime":1655261657032},{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1655261656714},{"name":"./mergeMap","loc":{"line":1,"column":25,"index":25},"parent":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\mergeAll.js","resolved":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\mergeMap.js"},{"name":"../util/identity","loc":{"line":2,"column":25,"index":65},"parent":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\mergeAll.js","resolved":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\identity.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeAll = mergeAll;\n\nvar _mergeMap = require(\"./mergeMap\");\n\nvar _identity = require(\"../util/identity\");\n\nfunction mergeAll(concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Infinity;\n  }\n\n  return (0, _mergeMap.mergeMap)(_identity.identity, concurrent);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":6},"generated":{"line":12,"column":0}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":16},"generated":{"line":12,"column":9}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":6},"generated":{"line":12,"column":17}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":12,"column":18}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":6},"generated":{"line":12,"column":28}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":86},"generated":{"line":12,"column":30}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":13,"column":2}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":13,"column":6}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":13,"column":16}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":13,"column":21}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":13,"column":26}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":13,"column":27}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":13,"column":29}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":14,"column":4}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":14,"column":14}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":14,"column":17}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":57},"generated":{"line":14,"column":25}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":64,"column":86},"generated":{"line":15,"column":2}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":17,"column":2}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":9},"generated":{"line":17,"column":9}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":9},"generated":{"line":17,"column":13}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":9},"generated":{"line":17,"column":31}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":18},"generated":{"line":17,"column":33}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":9},"generated":{"line":17,"column":51}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":28},"generated":{"line":17,"column":53}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":9},"generated":{"line":17,"column":63}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":17,"column":64}},{"source":"../../../../src/internal/operators/mergeAll.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":18,"column":0}}],"sources":{"../../../../src/internal/operators/mergeAll.ts":"import { mergeMap } from './mergeMap';\r\nimport { identity } from '../util/identity';\r\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\r\n\r\n/**\r\n * Converts a higher-order Observable into a first-order Observable which\r\n * concurrently delivers all values that are emitted on the inner Observables.\r\n *\r\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\r\n *\r\n * ![](mergeAll.png)\r\n *\r\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\r\n * a higher-order Observable. Each time it observes one of these emitted inner\r\n * Observables, it subscribes to that and delivers all the values from the\r\n * inner Observable on the output Observable. The output Observable only\r\n * completes once all inner Observables have completed. Any error delivered by\r\n * a inner Observable will be immediately emitted on the output Observable.\r\n *\r\n * ## Examples\r\n *\r\n * Spawn a new interval Observable for each click event, and blend their outputs as one Observable\r\n *\r\n * ```ts\r\n * import { fromEvent, map, interval, mergeAll } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const higherOrder = clicks.pipe(map(() => interval(1000)));\r\n * const firstOrder = higherOrder.pipe(mergeAll());\r\n *\r\n * firstOrder.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * Count from 0 to 9 every second for each click, but only allow 2 concurrent timers\r\n *\r\n * ```ts\r\n * import { fromEvent, map, interval, take, mergeAll } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const higherOrder = clicks.pipe(\r\n *   map(() => interval(1000).pipe(take(10)))\r\n * );\r\n * const firstOrder = higherOrder.pipe(mergeAll(2));\r\n *\r\n * firstOrder.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link combineLatestAll}\r\n * @see {@link concatAll}\r\n * @see {@link exhaustAll}\r\n * @see {@link merge}\r\n * @see {@link mergeMap}\r\n * @see {@link mergeMapTo}\r\n * @see {@link mergeScan}\r\n * @see {@link switchAll}\r\n * @see {@link switchMap}\r\n * @see {@link zipAll}\r\n *\r\n * @param {number} [concurrent=Infinity] Maximum number of inner\r\n * Observables being subscribed to concurrently.\r\n * @return A function that returns an Observable that emits values coming from\r\n * all the inner Observables emitted by the source Observable.\r\n */\r\nexport function mergeAll<O extends ObservableInput<any>>(concurrent: number = Infinity): OperatorFunction<O, ObservedValueOf<O>> {\r\n  return mergeMap(identity, concurrent);\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"ec57e1e6f652ba4326b5b6c1f2a9bf7e","cacheData":{"env":{}}}