{"id":"../node_modules/rxjs/dist/esm5/internal/operators/concatAll.js","dependencies":[{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\concatAll.js.map","includedInParent":true,"mtime":1655261656592},{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\src\\internal\\operators\\concatAll.ts","includedInParent":true,"mtime":1655261656727},{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\package.json","includedInParent":true,"mtime":1655261657032},{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1655261656714},{"name":"./mergeAll","loc":{"line":1,"column":25,"index":25},"parent":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\concatAll.js","resolved":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\mergeAll.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.concatAll = concatAll;\n\nvar _mergeAll = require(\"./mergeAll\");\n\nfunction concatAll() {\n  return (0, _mergeAll.mergeAll)(1);\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":60,"column":6},"generated":{"line":10,"column":0}},{"source":"../../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":60,"column":16},"generated":{"line":10,"column":9}},{"source":"../../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":60,"column":6},"generated":{"line":10,"column":18}},{"source":"../../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":60,"column":25},"generated":{"line":10,"column":21}},{"source":"../../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":61,"column":2},"generated":{"line":11,"column":2}},{"source":"../../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":61,"column":9},"generated":{"line":11,"column":9}},{"source":"../../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":61,"column":9},"generated":{"line":11,"column":13}},{"source":"../../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":61,"column":9},"generated":{"line":11,"column":31}},{"source":"../../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":61,"column":18},"generated":{"line":11,"column":33}},{"source":"../../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":61,"column":9},"generated":{"line":11,"column":34}},{"source":"../../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":61,"column":2},"generated":{"line":11,"column":35}},{"source":"../../../../src/internal/operators/concatAll.ts","name":null,"original":{"line":62,"column":1},"generated":{"line":12,"column":0}}],"sources":{"../../../../src/internal/operators/concatAll.ts":"import { mergeAll } from './mergeAll';\r\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\r\n\r\n/**\r\n * Converts a higher-order Observable into a first-order Observable by\r\n * concatenating the inner Observables in order.\r\n *\r\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\r\n * inner Observable after the other.</span>\r\n *\r\n * ![](concatAll.svg)\r\n *\r\n * Joins every Observable emitted by the source (a higher-order Observable), in\r\n * a serial fashion. It subscribes to each inner Observable only after the\r\n * previous inner Observable has completed, and merges all of their values into\r\n * the returned observable.\r\n *\r\n * __Warning:__ If the source Observable emits Observables quickly and\r\n * endlessly, and the inner Observables it emits generally complete slower than\r\n * the source emits, you can run into memory issues as the incoming Observables\r\n * collect in an unbounded buffer.\r\n *\r\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\r\n * to `1`.\r\n *\r\n * ## Example\r\n *\r\n * For each click event, tick every second from 0 to 3, with no concurrency\r\n *\r\n * ```ts\r\n * import { fromEvent, map, interval, take, concatAll } from 'rxjs';\r\n *\r\n * const clicks = fromEvent(document, 'click');\r\n * const higherOrder = clicks.pipe(\r\n *   map(() => interval(1000).pipe(take(4)))\r\n * );\r\n * const firstOrder = higherOrder.pipe(concatAll());\r\n * firstOrder.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following:\r\n * // (results are not concurrent)\r\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\r\n * // on a 1000ms interval\r\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\r\n * ```\r\n *\r\n * @see {@link combineLatestAll}\r\n * @see {@link concat}\r\n * @see {@link concatMap}\r\n * @see {@link concatMapTo}\r\n * @see {@link exhaustAll}\r\n * @see {@link mergeAll}\r\n * @see {@link switchAll}\r\n * @see {@link switchMap}\r\n * @see {@link zipAll}\r\n *\r\n * @return A function that returns an Observable emitting values from all the\r\n * inner Observables concatenated.\r\n */\r\nexport function concatAll<O extends ObservableInput<any>>(): OperatorFunction<O, ObservedValueOf<O>> {\r\n  return mergeAll(1);\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"bd613212664da53875e9e4491c5a83e1","cacheData":{"env":{}}}