{"id":"../node_modules/rxjs/dist/esm5/internal/observable/defer.js","dependencies":[{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\defer.js.map","includedInParent":true,"mtime":1655261656582},{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\src\\internal\\observable\\defer.ts","includedInParent":true,"mtime":1655261656719},{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\package.json","includedInParent":true,"mtime":1655261657032},{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1655261656714},{"name":"../Observable","loc":{"line":1,"column":27,"index":27},"parent":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\defer.js","resolved":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\Observable.js"},{"name":"./innerFrom","loc":{"line":2,"column":26,"index":71},"parent":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\defer.js","resolved":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\innerFrom.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defer = defer;\n\nvar _Observable = require(\"../Observable\");\n\nvar _innerFrom = require(\"./innerFrom\");\n\nfunction defer(observableFactory) {\n  return new _Observable.Observable(function (subscriber) {\n    (0, _innerFrom.innerFrom)(observableFactory()).subscribe(subscriber);\n  });\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":53,"column":6},"generated":{"line":12,"column":0}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":53,"column":16},"generated":{"line":12,"column":9}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":53,"column":6},"generated":{"line":12,"column":14}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":53,"column":54},"generated":{"line":12,"column":15}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":53,"column":6},"generated":{"line":12,"column":32}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":53,"column":80},"generated":{"line":12,"column":34}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":54,"column":2},"generated":{"line":13,"column":2}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":13,"column":9}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":54,"column":13},"generated":{"line":13,"column":13}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":13,"column":35}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":54,"column":44},"generated":{"line":13,"column":36}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":54,"column":45},"generated":{"line":13,"column":46}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":54,"column":44},"generated":{"line":13,"column":56}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":54,"column":55},"generated":{"line":13,"column":58}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":55,"column":4},"generated":{"line":14,"column":4}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":55,"column":4},"generated":{"line":14,"column":8}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":55,"column":4},"generated":{"line":14,"column":28}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":55,"column":14},"generated":{"line":14,"column":30}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":55,"column":31},"generated":{"line":14,"column":47}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":55,"column":4},"generated":{"line":14,"column":49}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":55,"column":35},"generated":{"line":14,"column":51}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":55,"column":4},"generated":{"line":14,"column":60}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":55,"column":45},"generated":{"line":14,"column":61}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":55,"column":4},"generated":{"line":14,"column":71}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":56,"column":3},"generated":{"line":15,"column":2}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":54,"column":9},"generated":{"line":15,"column":3}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":54,"column":2},"generated":{"line":15,"column":4}},{"source":"../../../../src/internal/observable/defer.ts","name":null,"original":{"line":57,"column":1},"generated":{"line":16,"column":0}}],"sources":{"../../../../src/internal/observable/defer.ts":"import { Observable } from '../Observable';\r\nimport { ObservedValueOf, ObservableInput } from '../types';\r\nimport { innerFrom } from './innerFrom';\r\n\r\n/**\r\n * Creates an Observable that, on subscribe, calls an Observable factory to\r\n * make an Observable for each new Observer.\r\n *\r\n * <span class=\"informal\">Creates the Observable lazily, that is, only when it\r\n * is subscribed.\r\n * </span>\r\n *\r\n * ![](defer.png)\r\n *\r\n * `defer` allows you to create an Observable only when the Observer\r\n * subscribes. It waits until an Observer subscribes to it, calls the given\r\n * factory function to get an Observable -- where a factory function typically\r\n * generates a new Observable -- and subscribes the Observer to this Observable.\r\n * In case the factory function returns a falsy value, then EMPTY is used as\r\n * Observable instead. Last but not least, an exception during the factory\r\n * function call is transferred to the Observer by calling `error`.\r\n *\r\n * ## Example\r\n *\r\n * Subscribe to either an Observable of clicks or an Observable of interval, at random\r\n *\r\n * ```ts\r\n * import { defer, fromEvent, interval } from 'rxjs';\r\n *\r\n * const clicksOrInterval = defer(() => {\r\n *   return Math.random() > 0.5\r\n *     ? fromEvent(document, 'click')\r\n *     : interval(1000);\r\n * });\r\n * clicksOrInterval.subscribe(x => console.log(x));\r\n *\r\n * // Results in the following behavior:\r\n * // If the result of Math.random() is greater than 0.5 it will listen\r\n * // for clicks anywhere on the \"document\"; when document is clicked it\r\n * // will log a MouseEvent object to the console. If the result is less\r\n * // than 0.5 it will emit ascending numbers, one every second(1000ms).\r\n * ```\r\n *\r\n * @see {@link Observable}\r\n *\r\n * @param {function(): ObservableInput} observableFactory The Observable\r\n * factory function to invoke for each Observer that subscribes to the output\r\n * Observable. May also return a Promise, which will be converted on the fly\r\n * to an Observable.\r\n * @return {Observable} An Observable whose Observers' subscriptions trigger\r\n * an invocation of the given Observable factory function.\r\n */\r\nexport function defer<R extends ObservableInput<any>>(observableFactory: () => R): Observable<ObservedValueOf<R>> {\r\n  return new Observable<ObservedValueOf<R>>((subscriber) => {\r\n    innerFrom(observableFactory()).subscribe(subscriber);\r\n  });\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"890adda2124bc056ac35d7deb0d44666","cacheData":{"env":{}}}