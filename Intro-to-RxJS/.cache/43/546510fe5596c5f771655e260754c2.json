{"id":"../node_modules/rxjs/dist/esm5/internal/config.js","dependencies":[{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\config.js.map","includedInParent":true,"mtime":1655261656579},{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\src\\internal\\config.ts","includedInParent":true,"mtime":1655261656718},{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\package.json","includedInParent":true,"mtime":1655261657032},{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1655261656714}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.config = void 0;\nvar config = {\n  onUnhandledError: null,\n  onStoppedNotification: null,\n  Promise: undefined,\n  useDeprecatedSynchronousErrorHandling: false,\n  useDeprecatedNextContext: false\n};\nexports.config = config;"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":7},"generated":{"line":7,"column":0}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":13},"generated":{"line":7,"column":4}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":19},"generated":{"line":7,"column":10}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":36},"generated":{"line":7,"column":13}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":9,"column":2},"generated":{"line":8,"column":2}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":9,"column":18},"generated":{"line":8,"column":18}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":9,"column":20},"generated":{"line":8,"column":20}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":36},"generated":{"line":8,"column":24}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":10,"column":2},"generated":{"line":9,"column":2}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":10,"column":23},"generated":{"line":9,"column":23}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":10,"column":25},"generated":{"line":9,"column":25}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":36},"generated":{"line":9,"column":29}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":11,"column":2},"generated":{"line":10,"column":2}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":11,"column":9},"generated":{"line":10,"column":9}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":11,"column":11},"generated":{"line":10,"column":11}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":36},"generated":{"line":10,"column":20}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":12,"column":2},"generated":{"line":11,"column":2}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":12,"column":39},"generated":{"line":11,"column":39}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":12,"column":41},"generated":{"line":11,"column":41}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":36},"generated":{"line":11,"column":46}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":13,"column":2},"generated":{"line":12,"column":2}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":13,"column":26},"generated":{"line":12,"column":26}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":13,"column":28},"generated":{"line":12,"column":28}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":36},"generated":{"line":13,"column":0}},{"source":"../../../src/internal/config.ts","name":null,"original":{"line":8,"column":7},"generated":{"line":13,"column":1}}],"sources":{"../../../src/internal/config.ts":"import { Subscriber } from './Subscriber';\r\nimport { ObservableNotification } from './types';\r\n\r\n/**\r\n * The {@link GlobalConfig} object for RxJS. It is used to configure things\r\n * like how to react on unhandled errors.\r\n */\r\nexport const config: GlobalConfig = {\r\n  onUnhandledError: null,\r\n  onStoppedNotification: null,\r\n  Promise: undefined,\r\n  useDeprecatedSynchronousErrorHandling: false,\r\n  useDeprecatedNextContext: false,\r\n};\r\n\r\n/**\r\n * The global configuration object for RxJS, used to configure things\r\n * like how to react on unhandled errors. Accessible via {@link config}\r\n * object.\r\n */\r\nexport interface GlobalConfig {\r\n  /**\r\n   * A registration point for unhandled errors from RxJS. These are errors that\r\n   * cannot were not handled by consuming code in the usual subscription path. For\r\n   * example, if you have this configured, and you subscribe to an observable without\r\n   * providing an error handler, errors from that subscription will end up here. This\r\n   * will _always_ be called asynchronously on another job in the runtime. This is because\r\n   * we do not want errors thrown in this user-configured handler to interfere with the\r\n   * behavior of the library.\r\n   */\r\n  onUnhandledError: ((err: any) => void) | null;\r\n\r\n  /**\r\n   * A registration point for notifications that cannot be sent to subscribers because they\r\n   * have completed, errored or have been explicitly unsubscribed. By default, next, complete\r\n   * and error notifications sent to stopped subscribers are noops. However, sometimes callers\r\n   * might want a different behavior. For example, with sources that attempt to report errors\r\n   * to stopped subscribers, a caller can configure RxJS to throw an unhandled error instead.\r\n   * This will _always_ be called asynchronously on another job in the runtime. This is because\r\n   * we do not want errors thrown in this user-configured handler to interfere with the\r\n   * behavior of the library.\r\n   */\r\n  onStoppedNotification: ((notification: ObservableNotification<any>, subscriber: Subscriber<any>) => void) | null;\r\n\r\n  /**\r\n   * The promise constructor used by default for {@link Observable#toPromise toPromise} and {@link Observable#forEach forEach}\r\n   * methods.\r\n   *\r\n   * @deprecated As of version 8, RxJS will no longer support this sort of injection of a\r\n   * Promise constructor. If you need a Promise implementation other than native promises,\r\n   * please polyfill/patch Promise as you see appropriate. Will be removed in v8.\r\n   */\r\n  Promise?: PromiseConstructorLike;\r\n\r\n  /**\r\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\r\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\r\n   * call in a try/catch block. It also enables producer interference, a nasty bug\r\n   * where a multicast can be broken for all observers by a downstream consumer with\r\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BUY TIME\r\n   * FOR MIGRATION REASONS.\r\n   *\r\n   * @deprecated As of version 8, RxJS will no longer support synchronous throwing\r\n   * of unhandled errors. All errors will be thrown on a separate call stack to prevent bad\r\n   * behaviors described above. Will be removed in v8.\r\n   */\r\n  useDeprecatedSynchronousErrorHandling: boolean;\r\n\r\n  /**\r\n   * If true, enables an as-of-yet undocumented feature from v5: The ability to access\r\n   * `unsubscribe()` via `this` context in `next` functions created in observers passed\r\n   * to `subscribe`.\r\n   *\r\n   * This is being removed because the performance was severely problematic, and it could also cause\r\n   * issues when types other than POJOs are passed to subscribe as subscribers, as they will likely have\r\n   * their `this` context overwritten.\r\n   *\r\n   * @deprecated As of version 8, RxJS will no longer support altering the\r\n   * context of next functions provided as part of an observer to Subscribe. Instead,\r\n   * you will have access to a subscription or a signal or token that will allow you to do things like\r\n   * unsubscribe and test closed status. Will be removed in v8.\r\n   */\r\n  useDeprecatedNextContext: boolean;\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"e301d8727ae83ccd1a1f42826700c875","cacheData":{"env":{}}}