{"id":"../node_modules/rxjs/dist/esm5/internal/operators/publish.js","dependencies":[{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\publish.js.map","includedInParent":true,"mtime":1655261656604},{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\src\\internal\\operators\\publish.ts","includedInParent":true,"mtime":1655261656735},{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\package.json","includedInParent":true,"mtime":1655261657032},{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1655261656714},{"name":"../Subject","loc":{"line":1,"column":24,"index":24},"parent":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\publish.js","resolved":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\Subject.js"},{"name":"./multicast","loc":{"line":2,"column":26,"index":65},"parent":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\publish.js","resolved":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\multicast.js"},{"name":"./connect","loc":{"line":3,"column":24,"index":105},"parent":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\publish.js","resolved":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\connect.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.publish = publish;\n\nvar _Subject = require(\"../Subject\");\n\nvar _multicast = require(\"./multicast\");\n\nvar _connect = require(\"./connect\");\n\nfunction publish(selector) {\n  return selector ? function (source) {\n    return (0, _connect.connect)(selector)(source);\n  } : function (source) {\n    return (0, _multicast.multicast)(new _Subject.Subject())(source);\n  };\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":91,"column":6},"generated":{"line":14,"column":0}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":91,"column":16},"generated":{"line":14,"column":9}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":91,"column":6},"generated":{"line":14,"column":16}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":91,"column":30},"generated":{"line":14,"column":17}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":91,"column":6},"generated":{"line":14,"column":25}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":91,"column":63},"generated":{"line":14,"column":27}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":2},"generated":{"line":15,"column":2}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":9},"generated":{"line":15,"column":9}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":17},"generated":{"line":15,"column":17}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":20},"generated":{"line":15,"column":20}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":21},"generated":{"line":15,"column":30}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":20},"generated":{"line":15,"column":36}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":27},"generated":{"line":15,"column":38}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":32},"generated":{"line":16,"column":4}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":32},"generated":{"line":16,"column":11}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":32},"generated":{"line":16,"column":15}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":32},"generated":{"line":16,"column":31}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":40},"generated":{"line":16,"column":33}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":32},"generated":{"line":16,"column":41}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":50},"generated":{"line":16,"column":43}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":32},"generated":{"line":16,"column":49}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":32},"generated":{"line":16,"column":50}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":57},"generated":{"line":17,"column":2}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":17},"generated":{"line":17,"column":3}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":60},"generated":{"line":17,"column":6}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":61},"generated":{"line":17,"column":16}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":60},"generated":{"line":17,"column":22}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":67},"generated":{"line":17,"column":24}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":72},"generated":{"line":18,"column":4}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":72},"generated":{"line":18,"column":11}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":72},"generated":{"line":18,"column":15}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":72},"generated":{"line":18,"column":35}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":82},"generated":{"line":18,"column":37}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":86},"generated":{"line":18,"column":41}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":82},"generated":{"line":18,"column":57}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":72},"generated":{"line":18,"column":59}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":100},"generated":{"line":18,"column":61}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":72},"generated":{"line":18,"column":67}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":72},"generated":{"line":18,"column":68}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":107},"generated":{"line":19,"column":2}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":92,"column":2},"generated":{"line":19,"column":3}},{"source":"../../../../src/internal/operators/publish.ts","name":null,"original":{"line":93,"column":1},"generated":{"line":20,"column":0}}],"sources":{"../../../../src/internal/operators/publish.ts":"import { Observable } from '../Observable';\r\nimport { Subject } from '../Subject';\r\nimport { multicast } from './multicast';\r\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\r\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction, ObservableInput, ObservedValueOf } from '../types';\r\nimport { connect } from './connect';\r\n\r\n/**\r\n * Returns a connectable observable that, when connected, will multicast\r\n * all values through a single underlying {@link Subject} instance.\r\n *\r\n * @deprecated Will be removed in v8. To create a connectable observable, use {@link connectable}.\r\n * `source.pipe(publish())` is equivalent to\r\n * `connectable(source, { connector: () => new Subject(), resetOnDisconnect: false })`.\r\n * If you're using {@link refCount} after `publish`, use {@link share} operator instead.\r\n * `source.pipe(publish(), refCount())` is equivalent to\r\n * `source.pipe(share({ resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false }))`.\r\n * Details: https://rxjs.dev/deprecations/multicasting\r\n */\r\nexport function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\r\n\r\n/**\r\n * Returns an observable, that when subscribed to, creates an underlying {@link Subject},\r\n * provides an observable view of it to a `selector` function, takes the observable result of\r\n * that selector function and subscribes to it, sending its values to the consumer, _then_ connects\r\n * the subject to the original source.\r\n *\r\n * @param selector A function used to setup multicasting prior to automatic connection.\r\n *\r\n * @deprecated Will be removed in v8. Use the {@link connect} operator instead.\r\n * `publish(selector)` is equivalent to `connect(selector)`.\r\n * Details: https://rxjs.dev/deprecations/multicasting\r\n */\r\nexport function publish<T, O extends ObservableInput<any>>(selector: (shared: Observable<T>) => O): OperatorFunction<T, ObservedValueOf<O>>;\r\n\r\n/**\r\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\r\n * before it begins emitting items to those Observers that have subscribed to it.\r\n *\r\n * <span class=\"informal\">Makes a cold Observable hot</span>\r\n *\r\n * ![](publish.png)\r\n *\r\n * ## Examples\r\n *\r\n * Make `source$` hot by applying `publish` operator, then merge each inner observable into a single one\r\n * and subscribe\r\n *\r\n * ```ts\r\n * import { zip, interval, of, map, publish, merge, tap } from 'rxjs';\r\n *\r\n * const source$ = zip(interval(2000), of(1, 2, 3, 4, 5, 6, 7, 8, 9))\r\n *   .pipe(map(([, number]) => number));\r\n *\r\n * source$\r\n *   .pipe(\r\n *     publish(multicasted$ =>\r\n *       merge(\r\n *         multicasted$.pipe(tap(x => console.log('Stream 1:', x))),\r\n *         multicasted$.pipe(tap(x => console.log('Stream 2:', x))),\r\n *         multicasted$.pipe(tap(x => console.log('Stream 3:', x)))\r\n *       )\r\n *     )\r\n *   )\r\n *   .subscribe();\r\n *\r\n * // Results every two seconds\r\n * // Stream 1: 1\r\n * // Stream 2: 1\r\n * // Stream 3: 1\r\n * // ...\r\n * // Stream 1: 9\r\n * // Stream 2: 9\r\n * // Stream 3: 9\r\n * ```\r\n *\r\n * @see {@link publishLast}\r\n * @see {@link publishReplay}\r\n * @see {@link publishBehavior}\r\n *\r\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\r\n * as needed, without causing multiple subscriptions to the source sequence.\r\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\r\n * @return A function that returns a ConnectableObservable that upon connection\r\n * causes the source Observable to emit items to its Observers.\r\n * @deprecated Will be removed in v8. Use the {@link connectable} observable, the {@link connect} operator or the\r\n * {@link share} operator instead. See the overloads below for equivalent replacement examples of this operator's\r\n * behaviors.\r\n * Details: https://rxjs.dev/deprecations/multicasting\r\n */\r\nexport function publish<T, R>(selector?: OperatorFunction<T, R>): MonoTypeOperatorFunction<T> | OperatorFunction<T, R> {\r\n  return selector ? (source) => connect(selector)(source) : (source) => multicast(new Subject<T>())(source);\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"811014376d92b161efc1984bccbe5586","cacheData":{"env":{}}}