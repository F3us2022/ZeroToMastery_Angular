{"id":"../node_modules/rxjs/dist/esm5/internal/operators/reduce.js","dependencies":[{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\reduce.js.map","includedInParent":true,"mtime":1655261656605},{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\src\\internal\\operators\\reduce.ts","includedInParent":true,"mtime":1655261656736},{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\package.json","includedInParent":true,"mtime":1655261657032},{"name":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1655261656714},{"name":"./scanInternals","loc":{"line":1,"column":30,"index":30},"parent":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\reduce.js","resolved":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\scanInternals.js"},{"name":"../util/lift","loc":{"line":2,"column":24,"index":74},"parent":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\reduce.js","resolved":"W:\\Work\\ZeroToMastery_Angular\\Intro-to-RxJS\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\lift.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.reduce = reduce;\n\nvar _scanInternals = require(\"./scanInternals\");\n\nvar _lift = require(\"../util/lift\");\n\nfunction reduce(accumulator, seed) {\n  return (0, _lift.operate)((0, _scanInternals.scanInternals)(accumulator, seed, arguments.length >= 2, false, true));\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":60,"column":6},"generated":{"line":12,"column":0}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":60,"column":16},"generated":{"line":12,"column":9}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":60,"column":6},"generated":{"line":12,"column":15}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":60,"column":29},"generated":{"line":12,"column":16}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":60,"column":6},"generated":{"line":12,"column":27}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":60,"column":86},"generated":{"line":12,"column":29}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":60,"column":6},"generated":{"line":12,"column":33}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":60,"column":96},"generated":{"line":12,"column":35}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":2},"generated":{"line":13,"column":2}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":9},"generated":{"line":13,"column":9}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":9},"generated":{"line":13,"column":13}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":9},"generated":{"line":13,"column":26}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":17},"generated":{"line":13,"column":28}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":17},"generated":{"line":13,"column":32}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":17},"generated":{"line":13,"column":60}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":31},"generated":{"line":13,"column":62}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":17},"generated":{"line":13,"column":73}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":44},"generated":{"line":13,"column":75}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":17},"generated":{"line":13,"column":79}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":50},"generated":{"line":13,"column":81}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":59},"generated":{"line":13,"column":90}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":60},"generated":{"line":13,"column":91}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":50},"generated":{"line":13,"column":97}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":70},"generated":{"line":13,"column":101}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":17},"generated":{"line":13,"column":102}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":73},"generated":{"line":13,"column":104}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":17},"generated":{"line":13,"column":109}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":80},"generated":{"line":13,"column":111}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":17},"generated":{"line":13,"column":115}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":9},"generated":{"line":13,"column":116}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":61,"column":2},"generated":{"line":13,"column":117}},{"source":"../../../../src/internal/operators/reduce.ts","name":null,"original":{"line":62,"column":1},"generated":{"line":14,"column":0}}],"sources":{"../../../../src/internal/operators/reduce.ts":"import { scanInternals } from './scanInternals';\r\nimport { OperatorFunction } from '../types';\r\nimport { operate } from '../util/lift';\r\n\r\nexport function reduce<V, A = V>(accumulator: (acc: A | V, value: V, index: number) => A): OperatorFunction<V, V | A>;\r\nexport function reduce<V, A>(accumulator: (acc: A, value: V, index: number) => A, seed: A): OperatorFunction<V, A>;\r\nexport function reduce<V, A, S = A>(accumulator: (acc: A | S, value: V, index: number) => A, seed: S): OperatorFunction<V, A>;\r\n\r\n/**\r\n * Applies an accumulator function over the source Observable, and returns the\r\n * accumulated result when the source completes, given an optional seed value.\r\n *\r\n * <span class=\"informal\">Combines together all values emitted on the source,\r\n * using an accumulator function that knows how to join a new source value into\r\n * the accumulation from the past.</span>\r\n *\r\n * ![](reduce.png)\r\n *\r\n * Like\r\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\r\n * `reduce` applies an `accumulator` function against an accumulation and each\r\n * value of the source Observable (from the past) to reduce it to a single\r\n * value, emitted on the output Observable. Note that `reduce` will only emit\r\n * one value, only when the source Observable completes. It is equivalent to\r\n * applying operator {@link scan} followed by operator {@link last}.\r\n *\r\n * Returns an Observable that applies a specified `accumulator` function to each\r\n * item emitted by the source Observable. If a `seed` value is specified, then\r\n * that value will be used as the initial value for the accumulator. If no seed\r\n * value is specified, the first item of the source is used as the seed.\r\n *\r\n * ## Example\r\n *\r\n * Count the number of click events that happened in 5 seconds\r\n *\r\n * ```ts\r\n * import { fromEvent, takeUntil, interval, map, reduce } from 'rxjs';\r\n *\r\n * const clicksInFiveSeconds = fromEvent(document, 'click')\r\n *   .pipe(takeUntil(interval(5000)));\r\n *\r\n * const ones = clicksInFiveSeconds.pipe(map(() => 1));\r\n * const seed = 0;\r\n * const count = ones.pipe(reduce((acc, one) => acc + one, seed));\r\n *\r\n * count.subscribe(x => console.log(x));\r\n * ```\r\n *\r\n * @see {@link count}\r\n * @see {@link expand}\r\n * @see {@link mergeScan}\r\n * @see {@link scan}\r\n *\r\n * @param {function(acc: A, value: V, index: number): A} accumulator The accumulator function\r\n * called on each source value.\r\n * @param {A} [seed] The initial accumulation value.\r\n * @return A function that returns an Observable that emits a single value that\r\n * is the result of accumulating the values emitted by the source Observable.\r\n */\r\nexport function reduce<V, A>(accumulator: (acc: V | A, value: V, index: number) => A, seed?: any): OperatorFunction<V, V | A> {\r\n  return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));\r\n}\r\n"},"lineCount":null}},"error":null,"hash":"626cc40feccf3aadf4143d0a5a03de71","cacheData":{"env":{}}}